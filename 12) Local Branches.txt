* Benefits of using branches

Helps in collaboration :

- Each developer creates a clone of the original 'main' branch
- Then each developer makes a 'new feature' branch from the 'main' branch
- Each developer then keeps on committing to this 'new feature' branch
- At the end all the feature branches are merged to the main branch

This branching and re-merging helps in managing coding done by various developers
at the same time. This helps in decreasing the waits for the other developer to
finish its contribution. All the developers can keep on contributing to the code
at the same time.

> Working with local branches

* git branch
Lists all branches in your "local" repository

* git branch < new_branch_name >
Creates a new branch in your "local" repository (does not checkout the new branch)

* git branch -d < branch_name >
Deletes the branch of the "local" repo.
Note: This is a safe operation in that Git prevents you from deleting the branch if it
has unmerged changes.
Note: We cannot delete the branch we are currently working on

* git branch -D < branch_name >
Force delete the specified branch from "local" repo, even if it has unmerged changes.
This is the command to use if you want to permanently throw away all of the commits
associated with a particular line of development.

* git branch -m < new_name >
Renames the branch in the "local" repository
Can also use the following command to change the name of the branch which is not active:
  git branch -m < old_name > < new_name > 

* git checkout < local_branch_name >
Navigates from the current branch to another existing "local" branch

* git checkout -b < new_branch_name >
Creates a new branch in the "local" repo and navigates from the current branch to this
newly created branch